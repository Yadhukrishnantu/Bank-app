Server Creation 
---------------

1. Create package.json file   - npm init
2. install Express framework  - npm i express


Server side technology - node - resolve multiple requests at a time

api
---
http request

header           body
secret data      data-json/xml

types
-----
GET      - read
POST     - create
PUT      - complete updation
PATCH    - partial updation
DELETE   - remove 


server response status code
---------------------------

100 - information
200 - Success
300 - redirection
400 - client side error
500 - Server side error



server creation steps
---------------------

1. import express
2. create app using express
3. set port  number - 3000\
4. resolve http requests 


Nodemon
-------

if we run server using node , recompilation not work
so we use another server named as Nodemon

- npm i -g nodemon

express.json() - to convert all requestdatas from json to js (covert & recieve)
.json(data) - convert(js to json) & send the data as response
.status(statusCode) - change the response status code as statusCode



TOKEN in server
---------------

JWT TOKEN - json Web Token

install :- npm i jsonwebtoken
library :- jsonwebtoken
sign() :- method used to generate jwt Token
verify() :- used to verify json web token

Token verification
------------------

middlewares
-----------

token verification can do using middlewares
middlewares have the capacity to control server requests

middleware is a function with three arguements - request,response,next
two types of middlewares

          1. Aplication Specific middlewares 
                                              :-work before all requests
          2. Router Specific middlewares
                                              :-can apply to specific requests in server


how to solve runtume errors in js
---------------------------------

try except

 try
    error causing code

 catch
    error solve    





Mongo DB - DataBase
--------

install mongodb server


shell commands
--------------

CRUD

- show dbs                     -  To see databases
- use (database_name)          -  To open a database
- show collections             -  To see collections inside db 
- db.(collection_name).find()  -  To read data in collection 

- db.(collection_name).findOne({acno:1000}) 
                               - To read single data

- db.(collection_name).insertOne({"acno":1000,"name":amal,.....})
                               - Create new data

- db.(collection_name).find({balance:{gt:4000}})
                               - Find using a condition

- db.(collection_name).deleteOne({"uname":"anu"})
                               - delete count      used to delete

- db.(collection_name).updateOne({update:anu},{$set:{uname:anu v}})   
                               -  Update data



register - insertOne

login    - findOne

deposite  - updateOne

withdraw  - updateOne

transaction history - findOne

delete  - deleteOne


Server Database Integration
---------------------------

database -27017
server- 3000

mongoose -it's a library that used to server mdb Integration

install - npm i mongoose

steps
-----

1. import mongoose
2. state a connection string to integrate
3. define a model for our collection 

FrontEnd Server Integration
---------------------------

CORS - Cross Orgin Resource Sharing :- library used to FrontEnd server Integration
(4200-3000)


steps
-----
1. import Cross
2. connection string
